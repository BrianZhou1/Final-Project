  // THIS IS CLASS MAIN
import processing.sound.*;

final int MODE_EASY = 0, MODE_MEDIUM = 1, MODE_HARD = 3, MODE_CUSTOM = 2;
final String[] MODES = {"Easy", "Medium", "Hard", "Custom"};
final color DARK = color(14, 201, 122), LIGHT = color(0, 255, 148);
final int TRANSITION_LENGTH = 25;

SoundFile whoosh, select, oof, pop, tick;
PImage flag, bomb, wrong;
PFont tileFont;
GameScreen gameScreen;
TitleScreen title;
int sideLength, customX, customY, customBomb;
boolean init, bevel;

void settings() {
  size(600, 600);
  gameScreen = new GameScreen();
}

void setup() {
  background(255);
  sideLength = 35;
  customX = 15;
  customY = 15;
  customBomb = 40;
  bevel = true;
  title = new TitleScreen();
  whoosh = new SoundFile(this, "whoosh.mp3");
  select = new SoundFile(this, "select.mp3");
  oof = new SoundFile(this, "oof.mp3");
  pop = new SoundFile(this, "pop.mp3");
  tick = new SoundFile(this, "click.mp3");
  flag = loadImage("flag.png");
  bomb = loadImage("bomb.png");
  wrong = loadImage("wrong.png");
  tileFont = createFont("Microsoft PhagsPa Bold", 100);
  init = true;
}
void draw() {
  if (focused || init) {
    background(255);
    int mode = title.tick(false);
    if (mode != -1) {
      println(mode);
     if (gameScreen.isRunning()) {
          // show and/or hear an error
          // for now:
          println("End current game first!");
        } else {
          gameScreen.run(mode);
        }
      }
    
  }
  if (!focused && !init) {
    title.tick(true);
    fill(255, 150);
    rect(-10, -10, width + 10, height + 10);
  }
  if (frameCount % 10000 == 9999) {
    surface.setTitle("Subscribe to PewDiePie");
  } else if (frameCount % 10000 == 20) {
    surface.setTitle("Minesweeper");
  }
}



import processing.awt.PSurfaceAWT;

//TITLE CLASS
class BubbleButton extends TitleInteractive {
  int small = 40, large = 45, clickStage = 0;
  float size, sizeVel = 0, psizeVel = 0;
  String text;
  
  BubbleButton(String text, int x, int y) {
    super(x, y);
    xDefault = x;
    this.text = text;
    size = small;
  }
  
  public boolean tick(boolean reset) {
    if (reset) {
      size = small;
      show();
      return false;
    }
    int sizeGravity;
    if (mouseHover()) {
      sizeGravity = large;
    } else {
      sizeGravity = small;
    }
    if (abs(sizeVel) <= .05 && abs(size - sizeGravity) < 1) {
      sizeVel = 0;
      size = sizeGravity;
    } else if (size - sizeGravity > 1) {
      sizeVel -= .07;
      if (psizeVel > 0) {
        sizeVel *= .8;
      }
    } else if (size - sizeGravity < 1) {
      sizeVel += .07;
      if (psizeVel < 0) {
        sizeVel *= .8;
      }
    }
    psizeVel = sizeVel;
    size += sizeVel;
    show();
    return clickSense();
  }
  
  public void show(int x, int y, boolean transition) {
    if (transition) {
      textSize(small);
      size = small;
    } else {
      textSize(size);
    }
    fill(0, 142, 213);
    textAlign(CENTER);
    text(text, x, y);
  }
  
  private boolean clickSense() {
    if (clickStage == 0 && !mousePressed) {
      clickStage++;
    } else if (clickStage == 1) {
      if (mousePressed) {
        clickStage = 0;
      } else if (mouseHover()) {
        clickStage++;
      }
    } else if (clickStage == 2) {
      if (!mouseHover()) {
        clickStage = 0;
      } else if (mousePressed) {
        clickStage++;
      }
    } else if (clickStage == 3) {
      if (!mouseHover()) {
        clickStage = 0;
      } else if (!mousePressed) {
        clickStage = 0;
        return true;
      }
    }
    return false;
  }
  
  protected boolean mouseHover() {
    textSize(large);
    return mouseX > x - textWidth(text) / 2 && mouseX < x + textWidth(text) / 2 && mouseY > y - large && mouseY < y;
  }
}

public class GameScreen extends PApplet {
  private final int L = 0, R = 1;
  
  private Tile[][] tiles;
  private ArrayList<Tile> uncovers;
  private int xLength, yLength, xTiles, yTiles, bombCount, progress, cmouseX, cmouseY, cpmouseX, cpmouseY, timer, offset = 0, clickStageRight = 0, clickStageLeft = 0;
  private boolean die, idle, leftMouse, rightMouse;
  
  public void settings() {
    size(xLength, yLength);
  }
  
  public void setup() {
    drawBackground();
    textFont(tileFont);
  }
  
  public void draw() {
    if (die) {
      if (!idle) {
        println(timer, "seconds");
        oof.play();
        for (int i = 0; i < yTiles; i++) {
          for (int k = 0; k < xTiles; k++) {
            if (tiles[k][i].isBomb()) {
              tiles[k][i].show();
            }
          }
        }
        idle = true;
      }
      drawBackground();
    } else if (idle) {
      // win?
      drawBackground();
    } else {
      int progressSave = progress;
      if (offset != 0) {
        timer = (millis() - offset) / 1000;
      }
      calcMouse();
      Click click = click();
      if (click == null) {
        if (leftMouse && rightMouse && offset != 0 && tiles[cmouseX][cmouseY].isShown()) {
          int[][] highlights = new int[8][2];
          die = !hoverTile(cmouseX, cmouseY, highlights);
          drawBackground(highlights);
        } else {
          drawBackground();
        }
      } else {
        if (offset == 0) {
          uncovers = new ArrayList<Tile>();
          do {
            offset = millis();
            tiles = new Tile[xTiles][yTiles];
            for (int i = 0; i < bombCount; i++) {
              int x = (int)random(xTiles);
              int y = (int)random(yTiles);
              while (dist(x, y, click.x, click.y) <= 2 || tiles[x][y] != null) {
                x = (int)random(xTiles);
                y = (int)random(yTiles);
              }
              tiles[x][y] = new Tile(true);
            }
            for (int i = 0; i < yTiles; i++) {
              for (int k = 0; k < xTiles; k++) {
                if (tiles[k][i] == null) {
                  tiles[k][i] = new Tile();
                } else if (tiles[k][i].isBomb()) {
                  incTile(k + 1, i + 1);
                  incTile(k + 1, i);
                  incTile(k + 1, i - 1);
                  incTile(k, i + 1);
                  incTile(k, i - 1);
                  incTile(k - 1, i + 1);
                  incTile(k - 1, i);
                  incTile(k - 1, i - 1);
                }
              }
            }
            uncoverTile(click.x, click.y);
          } while (false);
        } else {
          if (click.mouse[L] && !click.mouse[R]) {
            die = !uncoverTile(click.x, click.y);
          } else if (click.mouse[R] && !click.mouse[L]) {
            tiles[click.x][click.y].flag();
          }
        }
        drawBackground();
      }
      if (progress != progressSave) {
        tick.play();
      }
      if (xTiles * yTiles - bombCount == progress) {
        idle = true;
      }
      fill(255, 100);
      rect(cmouseX * sideLength, cmouseY * sideLength, sideLength, sideLength);
    }
  }
  
  @Override
  void exit() {
    offset = 0;
    surface.pauseThread();
    surface.setVisible(false);
  }
  
  private boolean hoverTile(int x, int y, int[][] highlights) {
    int[][] adjacentPlacements = {{cmouseX + 1, cmouseY + 1},
                                  {cmouseX + 1, cmouseY    },
                                  {cmouseX + 1, cmouseY - 1},
                                  {cmouseX,     cmouseY + 1},
                                  {cmouseX,     cmouseY - 1},
                                  {cmouseX - 1, cmouseY + 1},
                                  {cmouseX - 1, cmouseY    },
                                  {cmouseX - 1, cmouseY - 1}};
    Tile[] adjacent = new Tile[8];
    addTile(adjacentPlacements[0][X], adjacentPlacements[0][Y], adjacent, 0);
    addTile(adjacentPlacements[1][X], adjacentPlacements[1][Y], adjacent, 1);
    addTile(adjacentPlacements[2][X], adjacentPlacements[2][Y], adjacent, 2);
    addTile(adjacentPlacements[3][X], adjacentPlacements[3][Y], adjacent, 3);
    addTile(adjacentPlacements[4][X], adjacentPlacements[4][Y], adjacent, 4);
    addTile(adjacentPlacements[5][X], adjacentPlacements[5][Y], adjacent, 5);
    addTile(adjacentPlacements[6][X], adjacentPlacements[6][Y], adjacent, 6);
    addTile(adjacentPlacements[7][X], adjacentPlacements[7][Y], adjacent, 7);
    int flag = 0;
    for (int i = 0; i < adjacent.length; i++) {
      if (adjacent[i] != null && adjacent[i].isFlag()) {
        flag++;
      }
    }
    if (flag == tiles[x][y].getCount()) {
      boolean ret = true;
      for (int i = 0; i < adjacent.length; i++) {
        highlights[i][X] = -1;
        if (adjacent[i] != null && !adjacent[i].isShown() && !adjacent[i].isFlag() && !uncoverTile(adjacentPlacements[i][X], adjacentPlacements[i][Y])) {
          tiles[adjacentPlacements[i][X]][adjacentPlacements[i][Y]].show();
          ret = false;
        }
      }
      return ret;
    } else {
      for (int i = 0; i < adjacent.length; i++) {
        if (adjacent[i] != null && !adjacent[i].isShown() && !adjacent[i].isFlag()) {
          highlights[i] = new int[]{adjacentPlacements[i][X], adjacentPlacements[i][Y]};
        } else {
          highlights[i][X] = -1;
        }
      }
    }
    return true;
  }
  
  private void addTile(int x, int y, Tile[] list, int index) {
    try {
      list[index] = tiles[x][y];
    } catch (NullPointerException e) {
      
    } catch (IndexOutOfBoundsException e) {
      
    }
  }
  
  private boolean uncoverTile(int x, int y) {
    uncovers = new ArrayList<Tile>();
    return uncoverTileRecursion(x, y);
  }
  
  private boolean uncoverTileRecursion(int x, int y) {
    if (x < xTiles && y < yTiles && x > -1 && y > -1) {
      Tile tile = tiles[x][y];
      if (!tile.isFlag() && !uncovers.contains(tile)) {
        uncovers.add(tile);
        if (tile.isBomb()) {
          tile.show();
          return false;
        } else if (tile.getCount() == 0) {
          tile.show();
          uncoverTileRecursion(x + 1, y + 1);
          uncoverTileRecursion(x + 1, y);
          uncoverTileRecursion(x + 1, y - 1);
          uncoverTileRecursion(x, y + 1);
          uncoverTileRecursion(x, y - 1);
          uncoverTileRecursion(x - 1, y + 1);
          uncoverTileRecursion(x - 1, y);
          uncoverTileRecursion(x - 1, y - 1);
        } else {
          tile.show();
        }
      }
    }
    return true;
  }
  
  private Click click() {
    if (clickStageRight == 2) {
      clickStageRight = 0;
    }
    if (clickStageRight == -1 && !rightMouse) {
      clickStageRight++;
    } else if (clickStageRight == 0 && rightMouse) {
      clickStageRight++;
    } else if (clickStageRight == 1) {
      if (cpmouseX != cmouseX || cpmouseY != cmouseY) {
        clickStageRight = -1;
      } else if (!rightMouse) {
        clickStageRight++;
      }
    }
    if (clickStageLeft == 2) {
      clickStageLeft = 0;
    }
    if (clickStageLeft == -1 && !leftMouse) {
      clickStageLeft++;
    } else if (clickStageLeft == 0 && leftMouse) {
      clickStageLeft++;
    } else if (clickStageLeft == 1) {
      if (cpmouseX != cmouseX || cpmouseY != cmouseY) {
        clickStageLeft = -1;
      } else if (!leftMouse) {
        clickStageLeft++;
      }
    }
    if (clickStageRight == 2 || clickStageLeft == 2) {
      return new Click(cmouseX, cmouseY, clickStageRight == 2, clickStageLeft == 2);
    } else {
      return null;
    }
  }
  
  private void drawBackground() {
    background(LIGHT);
    progress = 0;
    if (offset == 0) {
      fill(DARK);
      noStroke();
      for (int i = 0; i < height * width / (sideLength * sideLength); i++) {
        int x = i % (width / sideLength), y = i / (width / sideLength);
        if (abs(x - y) % 2 == 1) {
          rect(x * sideLength, y * sideLength, sideLength, sideLength);
        }
      }
    } else {
      for (int i = 0; i < height * width / (sideLength * sideLength); i++) {
        int x = i % (width / sideLength), y = i / (width / sideLength);
        if (abs(x - y) % 2 == 1) {
          fill(DARK);
          noStroke();
          rect(x * sideLength, y * sideLength, sideLength, sideLength);
        }
        if (showTile(x, y)) {
          progress++;
        }
      }
    }
  }
  
  private void drawBackground(int[][] highlights) {
    drawBackground();
    noStroke();
    fill(255, 150);
    for (int i = 0; i < highlights.length; i++) {
      if (highlights[i][X] != -1) {
        rect(highlights[i][X] * sideLength, highlights[i][Y] * sideLength, sideLength, sideLength);
      }
    }
  }

  // more set up stuff about display settings initially (including screen size)
  public void run(int mode) {
    init = false;
    if (mode == MODE_EASY) {
      xTiles = 10;
      yTiles = 10;
      bombCount = 10;
    } else if (mode == MODE_MEDIUM) {
      xTiles = 15;
      yTiles = 15;
      bombCount = 40;
    } else if (mode == MODE_HARD) {
      xTiles = 22;
      yTiles = 22;
      bombCount = 100;
    } else if (mode == MODE_CUSTOM) {
      xTiles = customX;
      yTiles = customY;
      bombCount = customBomb;
    } else {
      throw new RuntimeException("Unsupported mode");
    }
    xLength = xTiles * sideLength;
    yLength = yTiles * sideLength;
    if (surface == null) {
      PApplet.runSketch(new String[]{""}, this);
    } else {
      surface.setSize(xLength, yLength);
    }
    timer = 0;
    die = false;
    idle = false;
    leftMouse = false;
    rightMouse = false;
    clickStageRight = -1;
    clickStageLeft = -1;
    progress = 0;
    surface.setLocation(displayWidth / 2 - xLength / 2, displayHeight / 2 - yLength / 2);
    surface.setTitle(MODES[mode]);
    surface.setVisible(true);
    try {
      surface.resumeThread();
    } catch (NullPointerException e) {}
  }
  
  private void incTile(int x, int y) {
    try {
      if (tiles[x][y] == null) {
        tiles[x][y] = new Tile(1, false);
      } else {
        tiles[x][y].addCount();
      }
    } catch (IndexOutOfBoundsException e) {}
  }
  
  private boolean showTile(int x, int y) {
    if (die && tiles[x][y].isWrong()) {
      wrong.resize(0, (int)(sideLength * .75));
      imageMode(CENTER);
      image(wrong, (x + .5) * sideLength, (y + .5) * sideLength);
    } else if (tiles[x][y].isFlag()) {
      flag.resize(0, (int)(sideLength * .75));
      imageMode(CENTER);
      image(flag, (x + .5) * sideLength, (y + .5) * sideLength);
    } else if (tiles[x][y].isShown()) {
      if (tiles[x][y].isBomb()) {
        bomb.resize(0, (int)(sideLength * .75));
        imageMode(CENTER);
        image(bomb, (x + .5) * sideLength, (y + .5) * sideLength);
      } else {
        fill(255, 125);
        noStroke();
        rect(x * sideLength, y * sideLength, sideLength, sideLength);
        if (bevel) {
          float move = sideLength / 18;
          strokeWeight(move * 2);
          stroke(100, 150);
          line(x * sideLength + move, y * sideLength + move, x * sideLength + move, (y + 1) * sideLength - move);
          line(x * sideLength + move, y * sideLength + move, (x + 1) * sideLength - move, y * sideLength + move);
          stroke(200, 150);
          line((x + 1) * sideLength - move, (y + 1) * sideLength - move, (x + 1) * sideLength - move, y * sideLength + move);
          line((x + 1) * sideLength - move, (y + 1) * sideLength - move, x * sideLength + move, (y + 1) * sideLength - move);
        }
        if (tiles[x][y].getCount() > 0) {
          if (tiles[x][y].getCount() == 1) {
            fill(66, 134, 244);
          } else if (tiles[x][y].getCount() == 2) {
            fill(86, 150, 132);
          } else if (tiles[x][y].getCount() == 3) {
            fill(232, 37, 37);
          } else if (tiles[x][y].getCount() == 4) {
            fill(196, 37, 232);
          } else if (tiles[x][y].getCount() == 5) {
            fill(221, 204, 70);
          } else if (tiles[x][y].getCount() == 6) {
            fill(78, 183, 171);
          } else if (tiles[x][y].getCount() == 7) {
            fill(140);
          } else if (tiles[x][y].getCount() == 8) {
            fill(0);
          }
          noStroke();
          textAlign(CENTER, CENTER);
          textFont(tileFont);
          textSize(sideLength * .75);
          text(tiles[x][y].count, (x + .5) * sideLength, (y + .45) * sideLength);
        }
        return true;
      }
    }
    return false;
  }
  
  private void calcMouse() {
    cmouseX = (boundToScreen(mouseX, true) / sideLength) % xTiles;
    cmouseY = (boundToScreen(mouseY, false) / sideLength) % yTiles;
    cpmouseX = (boundToScreen(pmouseX, true) / sideLength) % xTiles;
    cpmouseY = (boundToScreen(pmouseY, false) / sideLength) % yTiles;
  }
  
  private int boundToScreen(int num, boolean x) {
    if (x) {
      if (num > width - 1) {
        return width - 1;
      } else if (num <= 0 ) {
        return 0;
      } else {
        return num;
      }
    } else {
      if (num > height - 1) {
        return height - 1;
      } else if (num <= 0 ) {
        return 0;
      } else {
        return num;
      }
    }
  }
  
  public boolean isRunning() {
    try {
      return ((PSurfaceAWT.SmoothCanvas)surface.getNative()).getFrame().isVisible();
    } catch (NullPointerException e) {
      return false;
    }
  }
  
  void mousePressed() {
    if (mouseButton == LEFT) {
      leftMouse = true;
    }
    if (mouseButton == RIGHT) {
      rightMouse = true;
    }
  }
  void mouseReleased() {
    if (mouseButton == LEFT) {
      leftMouse = false;
    }
    if (mouseButton == RIGHT) {
      rightMouse = false;
    }
  }
  
  class Click {
    int x, y;
    boolean[] mouse;
    
    Click(int x, int y, boolean rightMouse, boolean leftMouse) {
      this.x = x;
      this.y = y;
      mouse = new boolean[]{leftMouse, rightMouse};
    }
  }
}

class Tile {
  private int count = 0;
  private boolean bomb, flag = false, shown = false;
  
  Tile() {
    bomb = false;
  }
  Tile(boolean bomb) {
    this.bomb = bomb;
  }
  Tile(int count, boolean bomb) {
    this.count = count;
    this.bomb = bomb;
  }
  Tile(Tile tile) {
    count = tile.getCount();
    bomb = tile.isBomb();
    flag = tile.isFlag();
    shown = tile.isShown();
  }
  
  public void addCount() {
    if (!isBomb()) {
      count++;
    }
  }
  public void flag() {
    if (!isShown()) {
      pop.play();
      flag = !flag;
    }
  }
  public boolean show() {
    shown = true;
    return isBomb();
  }
  public int getCount() {
    return count;
  }
  public boolean isShown() {
    return shown;
  }
  public boolean isBomb() {
    return bomb;
  }
  public boolean isFlag() {
    return flag;
  }
  public boolean isWrong() {
    return isFlag() && !isBomb();
  }
}

class TitleButton extends TitleInteractive {
  private boolean lastTrigger = false;
  private int clickStage = 0;
  private String text;

  TitleButton(String text, int y) {
    super(20, y);
    this.text = text;
  }

  public boolean tick(boolean reset) {
    if (reset) {
      show(xDefault, y, false);
      return false;
    } else {
      clickSense();
      boolean ret = false;
      int xGravity;
      if (mouseHover()) {
        ret = true;
        xGravity = xDefault + 50;
        if (!lastTrigger) {
          whoosh.play();
          lastTrigger = true;
        }
      } else {
        lastTrigger = false;
        xGravity = xDefault;
      }
      x += (xGravity - x) / 3f;
      show();
      return ret;
    }
  }
  public void show(int x, int y, boolean transition) {
    textSize(40);
    if (x == xDefault) {
      fill(0, 122, 183);
    } else {
      fill(0, 142, 213);
    }
    textAlign(LEFT);
    if (transition) {
      fill(0, 122, 183);
      lastTrigger = false;
      this.x = xDefault;
    }
    text(text, x, y);
  }
  private void clickSense() {
    if (clickStage == 3) {
      clickStage = 0;
    }
    if (clickStage == 0 && mouseHover() && !mousePressed) {
      clickStage++;
    } else if (clickStage == 1) {
      if (!mouseHover()) {
        clickStage = 0;
      } else {
        if (mousePressed) {
          clickStage++;
        }
      }
    } else if (clickStage == 2) {
      if (!mouseHover()) {
        clickStage = 0;
      } else {
        if (!mousePressed) {
          clickStage++;
          select.play();
        }
      }
    }
  }
  protected boolean mouseHover() {
    return mouseY < y + 5 && mouseY > y - 45;
  }
  public boolean clicked() {
    return clickStage == 3;
  }
}

abstract class TitleInteractive {
  protected int x, y, xDefault;
  
  TitleInteractive(int x, int y) {
    this.x = x;
    this.y = y;
    xDefault = 20;
  }
  
  public abstract void show(int x, int y, boolean transition);
  protected abstract boolean mouseHover();
  public void show() {
    show(x, y, false);
  }
  public void transition(int transition, boolean to) {
    int totalWait = TRANSITION_LENGTH * 2 / 3, wait = (height - y) * totalWait / height;
    if (to) {
      if (transition > TRANSITION_LENGTH - totalWait + wait) {
        show(xDefault, y, true);
      } else {
        show(xDefault + (transition - wait) * width / (TRANSITION_LENGTH - totalWait) - width, y, true);
      }
    } else {
      if (transition < wait) {
        show(xDefault, y, true);
      } else {
        show(xDefault + (transition - wait) * width / (TRANSITION_LENGTH - totalWait), y, true);
      }
    }
  }
}

class TitleScreen {
  private TitleButton[] minesweeperScreen;
  private TitleInteractive[] customScreen;
  private TitleButton easy, medium, hard, custom;
  private TitleSlider heightSlider, widthSlider, bombCountSlider;
  private BubbleButton customPlay, back;
  private float titleY = 30, bottomTextX = -200, bottomFade = 255;
  private String screen = "Minesweeper", from = "Minesweeper", bottomText = "", bottomTextMem = "";
  private int transition = 0;

  TitleScreen() {
    easy = new TitleButton("Easy", 180);
    medium = new TitleButton("Medium", 270);
    hard = new TitleButton("Hard", 360);
    custom = new TitleButton("Custom", 450);
    minesweeperScreen = new TitleButton[]{easy, medium, hard, custom};
    heightSlider = new TitleSlider("Height", 180, 3, 25, customY);
    widthSlider = new TitleSlider("Width", 300, 3, 25, customX);
    bombCountSlider = new TitleSlider("Bomb Count", 420, 1, customY * customX - 1, customBomb);
    customPlay = new BubbleButton("Play", width - 75, height - 50);
    back = new BubbleButton("Back", 75, height - 50);
    customScreen = new TitleInteractive[]{heightSlider, widthSlider, bombCountSlider, customPlay, back};
  }
  
  public int tick(boolean reset) {
    backAnimation();
    textSize(50);
    fill(0, 102, 153);
    textAlign(CENTER);
    titleY = 10 * sin(frameCount / 30f) + 80;
    if (transition > 0) {
      fill(0, 102, 153, transition * 255 / TRANSITION_LENGTH);
      text(screen, width / 2, titleY);
      fill(0, 102, 153, (TRANSITION_LENGTH - transition) * 255 / TRANSITION_LENGTH);
      text(from, width / 2, titleY);
      if (screen == "Minesweeper") {
        for (int i = 0; i < minesweeperScreen.length; i++) {
          minesweeperScreen[i].transition(transition, true);
        }
      } else if (screen == "Custom") {
        for (int i = 0; i < customScreen.length; i++) {
          customScreen[i].transition(transition, true);
        }
      }
      if (from == "Minesweeper") {
        for (int i = 0; i < minesweeperScreen.length; i++) {
          minesweeperScreen[i].transition(transition, false);
        }
      } else if (from == "Custom") {
        for (int i = 0; i < customScreen.length; i++) {
          customScreen[i].transition(transition, false);
        }
      }
      transition++;
      if (transition > TRANSITION_LENGTH) {
        transition = 0;
      }
      return -1;
    } else {
      if (screen == "Minesweeper") {
        return titleTick(reset);
      } else if (screen == "Custom") {
        return customTick(reset);
      } else {
        throw new RuntimeException("Invalid screen command");
      }
    }
  }
  private int customTick(boolean reset) {
    text("Custom", width / 2, titleY);
    int psize = customX * customY;
    customY = heightSlider.tick();
    customX = widthSlider.tick();
    bombCountSlider.bound(1, customY * customX - 1);
    if (psize != customX * customY) {
      float len = sqrt(customX * customY);
      if (len < 10) {
        if (len < 7) {
          bombCountSlider.setValue(round(len * 5 / 8));
        } else {
          bombCountSlider.setValue(round(len * 4 / 5));
        }
      } else {
        bombCountSlider.setValue(round(48.6532 * pow(.0159964, -.0142335 * len) - 77.6552)); // formula written on desmos
      }
    }
    customBomb = bombCountSlider.tick();
    if (customPlay.tick(reset)) {
      select.play();
      return MODE_CUSTOM;
    } else if (back.tick(reset)) {
      select.play();
      title();
    }
    return -1;
  }
  private int titleTick(boolean reset) {
    text("Minesweeper", width / 2, titleY);
    bottomText = "";
    if (easy.tick(reset)) {
      bottomText = "This is embarrassing";
    }
    if (medium.tick(reset)) {
      bottomText = "Thought so";
    }
    if (hard.tick(reset)) {
      bottomText = "Show off";
    }
    if (custom.tick(reset)) {
      bottomText = "Too good for presets?";
    }
    if (bottomText == "") {
      bottomFade += 20;
      if (bottomFade > 255) {
        bottomFade = 255;
      }
    } else {
      bottomFade -= 20;
      if (bottomFade < 0) {
        bottomFade = 0;
      }
      if (bottomText != bottomTextMem) {
        bottomTextX = -200;
      } else {
        bottomTextX += (width / 2 - bottomTextX) / 3f;
      }
    }
    bottomTextMem = bottomText;
    textAlign(CENTER);
    textSize(20);
    if (reset) {
      fill(0, 142, 213);
    } else {
      fill(0, 142, 213, bottomFade);
    }
    text("Programmed by Jack, Brian, Jon-Marc, Kristof, and Richard", width / 2, height - 40);
    fill(0, 142, 213);
    text(bottomText, bottomTextX, height - 40);
    for (int i = 0; i < MODES.length; i++) {
      if (minesweeperScreen[i].clicked()) {
        if (i == MODE_CUSTOM) {
          custom();
          return -1;
        }
        return i;
      }
    }
    return -1;
  }
  private void backAnimation() {
    background(LIGHT);
    fill(DARK);
    noStroke();
    int sideLength = 40;
    for (int i = 0; i < (height + 4 * sideLength) * (width + 4 * 40) / (sideLength * sideLength); i++) {
      int x = i % ((width + 4 * sideLength) / sideLength), y = i / ((width + 4 * sideLength) / sideLength);
      if (abs(x - y) % 2 == 1)
      rect(-2 * sideLength + x * sideLength + (frameCount / 8f) % (sideLength * 2), -2 * sideLength + y * sideLength + (frameCount / 8f) % (sideLength * 2), sideLength, sideLength);
    }
    fill(255, 150);
    rect(-10, -10, width + 20, height + 20);
  }
  void custom() {
    from = screen;
    screen = "Custom";
    transition = 1;
  }
  void title() {
    from = screen;
    screen = "Minesweeper";
    transition = 1;
  }
}

class TitleSlider extends TitleInteractive {
  private int value, editCursor, pnumTyped = -2, lowBound, highBound, dragStage = 0, clickStage = 0, blinkSave;
  private String title, editValue = "";
  private boolean edit = false, editInit;
  
  TitleSlider(String title, int y) {
    super(20, y);
    this.title = title;
  }
  TitleSlider(String title, int y, int lowBound, int highBound) {
    super(20, y);
    this.title = title;
    this.lowBound = lowBound;
    this.highBound = highBound;
    value = (lowBound + highBound) / 2;
  }
  TitleSlider(String title, int y, int value) {
    super(20, y);
    this.title = title;
    this.value = value;
  }
  TitleSlider(String title, int y, int lowBound, int highBound, int value) {
    super(20, y);
    this.title = title;
    this.lowBound = lowBound;
    this.highBound = highBound;
    this.value = value;
  }
  
  public int tick() {
    fill(0, 122, 183);
    textSize(35);
    textAlign(LEFT);
    if (clicked()) {
      edit = true;
      editValue = Integer.toString(value);
      editInit = true;
      edit();
    } else if (edit) {
      edit();
      if (dragged()) {
        drag();
      }
    } else {
      if (!editValue.equals("")) {
        int changeValue = Integer.valueOf(editValue);
        if (editValue != "" && changeValue >= lowBound && changeValue <= highBound) {
          value = changeValue;
          editValue = "";
        }
      }
      if (dragged()) {
        drag();
      }
      show();
    }
    return value;
  }
  private boolean dragged() {
    if (dragStage == 0 && !mousePressed) {
      dragStage++;
    } else if (dragStage == 1) {
      if (mousePressed) {
        dragStage = 0;
      } else if (dist((value - lowBound) * (width - 230) / (highBound - lowBound) + 115, y + 45, mouseX, mouseY) <= 15) {
        dragStage++;
      }
    } else if (dragStage == 2) {
      if (dist((value - lowBound) * (width - 230) / (highBound - lowBound) + 115, y + 45, mouseX, mouseY) > 15) {
        dragStage = 0;
      } else if (mousePressed) {
        dragStage++;
      }
    } else if (dragStage == 3) {
      if (!mousePressed) {
        dragStage = 0;
      }
    }
    return dragStage == 3;
  }
  private boolean clicked() {
    if (clickStage == 0 && !mousePressed) {
      clickStage++;
    } else if (clickStage == 1) {
      if (mousePressed) {
        clickStage = 0;
      } else if (mouseHover()) {
        clickStage++;
      }
    } else if (clickStage == 2) {
      if (!mouseHover()) {
        clickStage = 0;
      } else if (mousePressed) {
        clickStage++;
      }
    } else if (clickStage == 3) {
      if (!mousePressed) {
        if (mouseHover()) {
          clickStage++;
          return true;
        } else {
          clickStage = 0;
        }
      }
    } else if (clickStage == 4) {
      clickStage = 0;
    } else if (mousePressed) {
      edit = false;
    }
    return false;
  }
  protected boolean mouseHover() {
    return mouseX > x + textWidth(title + ": ") && mouseX < x + textWidth(title + ": " + (int)value) && mouseY > y - 35 && mouseY < y;
  }
  private void drag() {
    value = round((mouseX - 115f) * (highBound - lowBound) / (width - 230) + lowBound);
    if (value > highBound) {
      value = highBound;
    } else if (value < lowBound) {
      value = lowBound;
    }
  }
  private void edit() {
    int numTyped = numTyped();
    if (numTyped != -1 && numTyped != pnumTyped) {
      blinkSave = frameCount;
      if (editInit) {
        editCursor = 0;
        if (numTyped == 0 || numTyped == 10 || numTyped == 13) {
          editValue = "0";
          editCursor++;
        } else if (numTyped == 12) {
          editCursor = editValue.length();
        } else if (numTyped != 11) {
          editValue = numTyped + "";
          editCursor++;
        }
        editInit = false;
      } else {
        if (numTyped == 10) {
          if (editCursor > 0) {
            editValue = editValue.substring(0, editCursor - 1) + editValue.substring(editCursor);
            editCursor--;
          }
        } else if (numTyped == 11) {
          if (editCursor > 0) {
            editCursor--;
          }
        } else if (numTyped == 12) {
          if (editCursor < editValue.length()) {
            editCursor++;
          }
        } else if (numTyped == 13) {
          if (editValue.length() > 0 && editCursor < editValue.length()) {
            editValue = editValue.substring(0, editCursor) + editValue.substring(editCursor + 1);
          }
        } else {
          String testValue = editValue.substring(0, editCursor) + numTyped + editValue.substring(editCursor);
          if (Integer.valueOf(testValue) <= highBound) {
            editValue = testValue;
            editCursor++;
          }
        }
      }
    }
    if (editValue.length() > 1 && editValue.charAt(0) == '0') {
      editValue = editValue.substring(1);
      editCursor--;
    } else if (editValue.equals("")) {
      editValue = "0";
      editCursor = 1;
    }
    pnumTyped = numTyped;
    if (editInit) {
      text(title + ": ", x, y);
      fill(0, 122, 183, 155);
      noStroke();
      rect(x + textWidth(title + ": "), y - 35, textWidth((Integer.toString((int)value))), 40);
      fill(255);
      text((Integer.toString((int)value)), x + textWidth(title + ": "), y);
    } else {
      text(title + ": " + editValue, x, y);
      if ((frameCount - blinkSave) % 60 < 30) {
        stroke(0, 102, 153);
        strokeWeight(2);
        line(x + textWidth(title + ": " + editValue.substring(0, editCursor)), y - 37, x + textWidth(title + ": " + editValue.substring(0, editCursor)), y + 7);
      }
    }
    int displayValue = Integer.valueOf(editValue);
    if (displayValue < lowBound) {
      displayValue = value;
    }
    showSlider(displayValue);
    if (keyPressed && (key == ENTER || key == RETURN)) {
      edit = false;
    }
  }
  private int numTyped() {
    int ret = -1;
    if (keyPressed) {
      if (key == CODED) {
        if (keyCode == LEFT) {
          ret = 11;
        } else if (keyCode == RIGHT) {
          ret = 12;
        }
      } else {
        if (key >= 48 && key <= 57) {
          ret = key - 48;
        } else if (key == BACKSPACE) {
          ret = 10;
        } else if (key == DELETE) {
          ret = 13;
        }
      }
    }
    return ret;
  }
  public void show(int x, int y, boolean transition) {
    fill(0, 122, 183);
    textSize(35);
    textAlign(LEFT);
    text(title + ": " + (int)value, x, y);
    showSlider(value, x, y);
  }
  private void showSlider(int value) {
    showSlider(value, 20, y);
  }
  private void showSlider(int value, int x, int y) {
    stroke(0, 102, 153);
    strokeWeight(5);
    line(80 + x, y + 45, width - 120 + x, y + 45);
    fill(0, 102, 153);
    ellipse((value - lowBound) * (width - 230) / (highBound - lowBound) + 95 + x, y + 45, 15, 15);
    fill(0, 122, 183);
    ellipse((value - lowBound) * (width - 230) / (highBound - lowBound) + 95 + x, y + 45, 20, 20);
    textSize(25);
    text(highBound, width - 100 + x, y + 55);
    textAlign(RIGHT);
    text(lowBound, 60 + x, y + 55);
  }
  public void bound(int lowBound, int highBound) {
    this.lowBound = lowBound;
    this.highBound = highBound;
    if (value > highBound) {
      value = highBound;
    } else if (value < lowBound) {
      value = lowBound;
    }
  }
  private void bound() {
    bound(lowBound, highBound);
  }
  public void setValue(int value) {
    this.value = value;
    bound();
  }
}
